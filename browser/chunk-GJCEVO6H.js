import{a as v}from"./chunk-PS5VJGG3.js";import{a as o,f as _,o as u}from"./chunk-HTJRXNRF.js";import{a as m}from"./chunk-3WG2WLZ4.js";import{b as l}from"./chunk-4UCLQGBG.js";import{a as c}from"./chunk-PTJ4CXVK.js";function O(t){let r=0,e=Date.now();t.observableParameters=t.observableParameters??{};let s=t.contextObservable.add(i=>{let a=Date.now();r=a-e;let n={startTime:e,currentTime:a,deltaTime:r,completeRate:r/t.timeout,payload:i};t.onTick&&t.onTick(n),t.breakCondition&&t.breakCondition()&&(t.contextObservable.remove(s),t.onAborted&&t.onAborted(n)),r>=t.timeout&&(t.contextObservable.remove(s),t.onEnded&&t.onEnded(n))},t.observableParameters.mask,t.observableParameters.insertFirst,t.observableParameters.scope);return s}var b=class{constructor(r){this.onEachCountObservable=new l,this.onTimerAbortedObservable=new l,this.onTimerEndedObservable=new l,this.onStateChangedObservable=new l,this._observer=null,this._breakOnNextTick=!1,this._tick=e=>{let s=Date.now();this._timer=s-this._startTime;let i={startTime:this._startTime,currentTime:s,deltaTime:this._timer,completeRate:this._timer/this._timeToEnd,payload:e},a=this._breakOnNextTick||this._breakCondition(i);a||this._timer>=this._timeToEnd?this._stop(i,a):this.onEachCountObservable.notifyObservers(i)},this._setState(0),this._contextObservable=r.contextObservable,this._observableParameters=r.observableParameters??{},this._breakCondition=r.breakCondition??(()=>!1),this._timeToEnd=r.timeout,r.onEnded&&this.onTimerEndedObservable.add(r.onEnded),r.onTick&&this.onEachCountObservable.add(r.onTick),r.onAborted&&this.onTimerAbortedObservable.add(r.onAborted)}set breakCondition(r){this._breakCondition=r}clearObservables(){this.onEachCountObservable.clear(),this.onTimerAbortedObservable.clear(),this.onTimerEndedObservable.clear(),this.onStateChangedObservable.clear()}start(r=this._timeToEnd){if(this._state===1)throw new Error("Timer already started. Please stop it before starting again");this._timeToEnd=r,this._startTime=Date.now(),this._timer=0,this._observer=this._contextObservable.add(this._tick,this._observableParameters.mask,this._observableParameters.insertFirst,this._observableParameters.scope),this._setState(1)}stop(){this._state===1&&(this._breakOnNextTick=!0)}dispose(){this._observer&&this._contextObservable.remove(this._observer),this.clearObservables()}_setState(r){this._state=r,this.onStateChangedObservable.notifyObservers(this._state)}_stop(r,e=!1){this._contextObservable.remove(this._observer),this._setState(2),e?this.onTimerAbortedObservable.notifyObservers(r):this.onTimerEndedObservable.notifyObservers(r)}};var g=(()=>{class t extends v{constructor(e){super(e),this.cancel=this._registerSignalInput("cancel"),this.duration=this.registerDataInput("duration",_),this.lastDelayIndex=this.registerDataOutput("lastDelayIndex",u,new o(-1))}_preparePendingTasks(e){let s=this.duration.getValue(e);if(s<0||isNaN(s)||!isFinite(s))return this._reportError(e,"Invalid duration in SetDelay block");if(e._getGlobalContextVariable("activeDelays",0)>=t.MaxParallelDelayCount)return this._reportError(e,"Max parallel delays reached");let a=e._getGlobalContextVariable("lastDelayIndex",-1),n=e._getExecutionVariable(this,"pendingDelays",[]),T=e.configuration.scene,d=new b({timeout:s*1e3,contextObservable:T.onBeforeRenderObservable,onEnded:()=>this._onEnded(d,e)});d.start();let h=a+1;this.lastDelayIndex.setValue(new o(h),e),e._setGlobalContextVariable("lastDelayIndex",h),n[h]=d,e._setExecutionVariable(this,"pendingDelays",n),this._updateGlobalTimers(e)}_cancelPendingTasks(e){let s=e._getExecutionVariable(this,"pendingDelays",[]);for(let i of s)i?.dispose();e._deleteExecutionVariable(this,"pendingDelays"),this.lastDelayIndex.setValue(new o(-1),e),this._updateGlobalTimers(e)}_execute(e,s){if(s===this.cancel){this._cancelPendingTasks(e);return}else this._preparePendingTasks(e),this.out._activateSignal(e)}getClassName(){return"FlowGraphSetDelayBlock"}_onEnded(e,s){let i=s._getExecutionVariable(this,"pendingDelays",[]),a=i.indexOf(e);a!==-1?i.splice(a,1):c.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"),s._removePendingBlock(this),this.done._activateSignal(s),this._updateGlobalTimers(s)}_updateGlobalTimers(e){let s=e._getExecutionVariable(this,"pendingDelays",[]),i=e._getGlobalContextVariable("pendingDelays",[]);for(let a=0;a<s.length;a++){if(!s[a])continue;let n=s[a];i[a]&&i[a]!==n?c.Warn("FlowGraphTimerBlock: Timer ended but was not found in the running timers list"):i[a]=n}e._setGlobalContextVariable("pendingDelays",i)}}return t.MaxParallelDelayCount=100,t})();m("FlowGraphSetDelayBlock",g);export{O as a,g as b};
