import{b as x,c as B,d as C,e as k,f as T,g as y}from"./chunk-BWDL54XY.js";import{a as m}from"./chunk-JRRW43NS.js";import{a}from"./chunk-OLONUO6I.js";import{a as D}from"./chunk-G5N5N7YN.js";import{a as w,b as G,c as M,d as s,f as l,g as _,o as d,q as u}from"./chunk-XK53KQBE.js";import{g as N,h as A,i as v,j as S,k as F}from"./chunk-RMITEGV7.js";import{a as n}from"./chunk-3WG2WLZ4.js";var f=class extends D{constructor(r,e,o,p){super(r,p),this._operation=e,this._className=o}_doOperation(r){return this._operation(r)}getClassName(){return this._className}};var g=class extends D{constructor(r,e,o,p,c,h,$r){super(p,$r),this._operation=c,this._className=h,this.a=this.registerDataInput("a",r),this.b=this.registerDataInput("b",e),this.c=this.registerDataInput("c",o)}_doOperation(r){return this._operation(this.a.getValue(r),this.b.getValue(r),this.c.getValue(r))}getClassName(){return this._className}};var E=class extends m{constructor(r){super(u(r?.type),u(r?.type),u(r?.type),(e,o)=>this._polymorphicAdd(e,o),"FlowGraphAddBlock",r)}_polymorphicAdd(r,e){let o=x(r),p=x(e);if(B(o,p)||C(o,p)||k(o,p))return r.add(e);if(o==="Quaternion"||p==="Quaternion")return r.add(e);if(this.config?.preventIntegerFloatArithmetic&&typeof r!=typeof e)throw new Error("Cannot add different types of numbers.");return y(r)+y(e)}};n("FlowGraphAddBlock",E);var z=class extends m{constructor(r){super(u(r?.type),u(r?.type),u(r?.type),(e,o)=>this._polymorphicSubtract(e,o),"FlowGraphSubtractBlock",r)}_polymorphicSubtract(r,e){let o=x(r),p=x(e);if(B(o,p)||k(o,p)||C(o,p))return r.subtract(e);if(o==="Quaternion"||p==="Quaternion")return r.subtract(e);if(this.config?.preventIntegerFloatArithmetic&&typeof r!=typeof e)throw new Error("Cannot add different types of numbers.");return y(r)-y(e)}};n("FlowGraphSubtractBlock",z);var O=class extends m{constructor(r){super(u(r?.type),u(r?.type),u(r?.type),(e,o)=>this._polymorphicMultiply(e,o),"FlowGraphMultiplyBlock",r)}_polymorphicMultiply(r,e){let o=x(r),p=x(e);if(B(o,p)||k(o,p))return r.multiply(e);if(o==="Quaternion"||p==="Quaternion"){let c=r.clone();return c.x*=e.x,c.y*=e.y,c.z*=e.z,c.w*=e.w,c}else if(C(o,p))if(this.config?.useMatrixPerComponent){let c=r.m;for(let h=0;h<c.length;h++)c[h]*=e.m[h];return o==="Matrix2D"?new G(c):o==="Matrix3D"?new M(c):F.FromArray(c)}else return r=r,e=e,e.multiply(r);else{if(this.config?.preventIntegerFloatArithmetic&&typeof r!=typeof e)throw new Error("Cannot add different types of numbers.");return y(r)*y(e)}}};n("FlowGraphMultiplyBlock",O);var V=class extends m{constructor(r){super(u(r?.type),u(r?.type),u(r?.type),(e,o)=>this._polymorphicDivide(e,o),"FlowGraphDivideBlock",r)}_polymorphicDivide(r,e){let o=x(r),p=x(e);if(B(o,p)||k(o,p))return r.divide(e);if(o==="Quaternion"||p==="Quaternion"){let c=r.clone();return c.x/=e.x,c.y/=e.y,c.z/=e.z,c.w/=e.w,c}else if(C(o,p))if(this.config?.useMatrixPerComponent){let c=r.m;for(let h=0;h<c.length;h++)c[h]/=e.m[h];return o==="Matrix2D"?new G(c):o==="Matrix3D"?new M(c):F.FromArray(c)}else return r=r,e=e,r.divide(e);else{if(this.config?.preventIntegerFloatArithmetic&&typeof r!=typeof e)throw new Error("Cannot add different types of numbers.");return y(r)/y(e)}}};n("FlowGraphDivideBlock",V);var L=class extends f{constructor(r){super(l,e=>this._random(e),"FlowGraphRandomBlock",r),this.min=this.registerDataInput("min",l,r?.min??0),this.max=this.registerDataInput("max",l,r?.max??1),r?.seed&&(this._seed=r.seed)}_isSeed(r=this._seed){return r!==void 0}_getRandomValue(){if(this._isSeed(this._seed)){let r=Math.sin(this._seed++)*1e4;return r-Math.floor(r)}return Math.random()}_random(r){let e=this.min.getValue(r),o=this.max.getValue(r);return this._getRandomValue()*(o-e)+e}};n("FlowGraphRandomBlock",L);var q=class extends f{constructor(r){super(l,()=>Math.E,"FlowGraphEBlock",r)}};n("FlowGraphEBlock",q);var Q=class extends f{constructor(r){super(l,()=>Math.PI,"FlowGraphPIBlock",r)}};n("FlowGraphPIBlock",Q);var P=class extends f{constructor(r){super(l,()=>Number.POSITIVE_INFINITY,"FlowGraphInfBlock",r)}};n("FlowGraphInfBlock",P);var $=class extends f{constructor(r){super(l,()=>Number.NaN,"FlowGraphNaNBlock",r)}};n("FlowGraphNaNBlock",$);function i(t,r){switch(x(t)){case"FlowGraphInteger":return t=t,new w(r(t.value));case"Vector2":return t=t,new N(r(t.x),r(t.y));case"Vector3":return t=t,new A(r(t.x),r(t.y),r(t.z));case"Vector4":return t=t,new v(r(t.x),r(t.y),r(t.z),r(t.w));case"Quaternion":return t=t,new S(r(t.x),r(t.y),r(t.z),r(t.w));case"Matrix":return t=t,F.FromArray(t.m.map(r));case"Matrix2D":return t=t,new G(t.m.map(r));case"Matrix3D":return t=t,new M(t.m.map(r));default:return t=t,r(t)}}var j=class extends a{constructor(r){super(l,l,e=>this._polymorphicAbs(e),"FlowGraphAbsBlock",r)}_polymorphicAbs(r){return i(r,Math.abs)}};n("FlowGraphAbsBlock",j);var W=class extends a{constructor(r){super(l,l,e=>this._polymorphicSign(e),"FlowGraphSignBlock",r)}_polymorphicSign(r){return i(r,Math.sign)}};n("FlowGraphSignBlock",W);var Z=class extends a{constructor(r){super(l,l,e=>this._polymorphicTrunc(e),"FlowGraphTruncBlock",r)}_polymorphicTrunc(r){return i(r,Math.trunc)}};n("FlowGraphTruncBlock",Z);var U=class extends a{constructor(r){super(l,l,e=>this._polymorphicFloor(e),"FlowGraphFloorBlock",r)}_polymorphicFloor(r){return i(r,Math.floor)}};n("FlowGraphFloorBlock",U);var X=class extends a{constructor(r){super(s,s,e=>this._polymorphicCeiling(e),"FlowGraphCeilBlock",r)}_polymorphicCeiling(r){return i(r,Math.ceil)}};n("FlowGraphCeilBlock",X);var H=class extends a{constructor(r){super(s,s,e=>this._polymorphicRound(e),"FlowGraphRoundBlock",r)}_polymorphicRound(r){return i(r,e=>e<0&&this.config?.roundHalfAwayFromZero?-Math.round(-e):Math.round(e))}};n("FlowGraphRoundBlock",H);var Y=class extends a{constructor(r){super(s,s,e=>this._polymorphicFraction(e),"FlowGraphFractBlock",r)}_polymorphicFraction(r){return i(r,e=>e-Math.floor(e))}};n("FlowGraphFractBlock",Y);var J=class extends a{constructor(r){super(s,s,e=>this._polymorphicNeg(e),"FlowGraphNegationBlock",r)}_polymorphicNeg(r){return i(r,e=>-e)}};n("FlowGraphNegationBlock",J);function I(t,r,e){switch(x(t)){case"FlowGraphInteger":return t=t,r=r,new w(e(t.value,r.value));case"Vector2":return t=t,r=r,new N(e(t.x,r.x),e(t.y,r.y));case"Vector3":return t=t,r=r,new A(e(t.x,r.x),e(t.y,r.y),e(t.z,r.z));case"Vector4":return t=t,r=r,new v(e(t.x,r.x),e(t.y,r.y),e(t.z,r.z),e(t.w,r.w));case"Quaternion":return t=t,r=r,new S(e(t.x,r.x),e(t.y,r.y),e(t.z,r.z),e(t.w,r.w));case"Matrix":return t=t,F.FromArray(t.m.map((p,c)=>e(p,r.m[c])));case"Matrix2D":return t=t,new G(t.m.map((p,c)=>e(p,r.m[c])));case"Matrix3D":return t=t,new M(t.m.map((p,c)=>e(p,r.m[c])));default:return e(y(t),y(r))}}var K=class extends m{constructor(r){super(s,s,s,(e,o)=>this._polymorphicRemainder(e,o),"FlowGraphModuloBlock",r)}_polymorphicRemainder(r,e){return I(r,e,(o,p)=>o%p)}};n("FlowGraphModuloBlock",K);var b=class extends m{constructor(r){super(s,s,s,(e,o)=>this._polymorphicMin(e,o),"FlowGraphMinBlock",r)}_polymorphicMin(r,e){return I(r,e,Math.min)}};n("FlowGraphMinBlock",b);var rr=class extends m{constructor(r){super(s,s,s,(e,o)=>this._polymorphicMax(e,o),"FlowGraphMaxBlock",r)}_polymorphicMax(r,e){return I(r,e,Math.max)}};n("FlowGraphMaxBlock",rr);function jr(t,r,e){return Math.min(Math.max(t,Math.min(r,e)),Math.max(r,e))}function Pr(t,r,e,o){switch(x(t)){case"FlowGraphInteger":return t=t,r=r,e=e,new w(o(t.value,r.value,e.value));case"Vector2":return t=t,r=r,e=e,new N(o(t.x,r.x,e.x),o(t.y,r.y,e.y));case"Vector3":return t=t,r=r,e=e,new A(o(t.x,r.x,e.x),o(t.y,r.y,e.y),o(t.z,r.z,e.z));case"Vector4":return t=t,r=r,e=e,new v(o(t.x,r.x,e.x),o(t.y,r.y,e.y),o(t.z,r.z,e.z),o(t.w,r.w,e.w));case"Quaternion":return t=t,r=r,e=e,new S(o(t.x,r.x,e.x),o(t.y,r.y,e.y),o(t.z,r.z,e.z),o(t.w,r.w,e.w));case"Matrix":return F.FromArray(t.m.map((c,h)=>o(c,r.m[h],e.m[h])));case"Matrix2D":return new G(t.m.map((c,h)=>o(c,r.m[h],e.m[h])));case"Matrix3D":return new M(t.m.map((c,h)=>o(c,r.m[h],e.m[h])));default:return o(y(t),y(r),y(e))}}var er=class extends g{constructor(r){super(s,s,s,s,(e,o,p)=>this._polymorphicClamp(e,o,p),"FlowGraphClampBlock",r)}_polymorphicClamp(r,e,o){return Pr(r,e,o,jr)}};n("FlowGraphClampBlock",er);function Wr(t){return Math.min(Math.max(t,0),1)}var tr=class extends a{constructor(r){super(s,s,e=>this._polymorphicSaturate(e),"FlowGraphSaturateBlock",r)}_polymorphicSaturate(r){return i(r,Wr)}};n("FlowGraphSaturateBlock",tr);function Zr(t,r,e){return(1-e)*t+e*r}var or=class extends g{constructor(r){super(s,s,s,s,(e,o,p)=>this._polymorphicInterpolate(e,o,p),"FlowGraphMathInterpolationBlock",r)}_polymorphicInterpolate(r,e,o){return Pr(r,e,o,Zr)}};n("FlowGraphMathInterpolationBlock",or);var sr=class extends m{constructor(r){super(s,s,_,(e,o)=>this._polymorphicEq(e,o),"FlowGraphEqualityBlock",r)}_polymorphicEq(r,e){let o=x(r),p=x(e);return typeof r!=typeof e?!1:B(o,p)||C(o,p)||k(o,p)?r.equals(e):r===e}};n("FlowGraphEqualityBlock",sr);function R(t,r,e){if(T(t)&&T(r))return e(y(t),y(r));throw new Error(`Cannot compare ${t} and ${r}`)}var nr=class extends m{constructor(r){super(s,s,_,(e,o)=>this._polymorphicLessThan(e,o),"FlowGraphLessThanBlock",r)}_polymorphicLessThan(r,e){return R(r,e,(o,p)=>o<p)}};n("FlowGraphLessThanBlock",nr);var pr=class extends m{constructor(r){super(s,s,_,(e,o)=>this._polymorphicLessThanOrEqual(e,o),"FlowGraphLessThanOrEqualBlock",r)}_polymorphicLessThanOrEqual(r,e){return R(r,e,(o,p)=>o<=p)}};n("FlowGraphLessThanOrEqualBlock",pr);var lr=class extends m{constructor(r){super(s,s,_,(e,o)=>this._polymorphicGreaterThan(e,o),"FlowGraphGreaterThanBlock",r)}_polymorphicGreaterThan(r,e){return R(r,e,(o,p)=>o>p)}};n("FlowGraphGreaterThanBlock",lr);var cr=class extends m{constructor(r){super(s,s,_,(e,o)=>this._polymorphicGreaterThanOrEqual(e,o),"FlowGraphGreaterThanOrEqualBlock",r)}_polymorphicGreaterThanOrEqual(r,e){return R(r,e,(o,p)=>o>=p)}};n("FlowGraphGreaterThanOrEqualBlock",cr);var ar=class extends a{constructor(r){super(s,_,e=>this._polymorphicIsNan(e),"FlowGraphIsNaNBlock",r)}_polymorphicIsNan(r){if(T(r,!0))return isNaN(y(r));throw new Error(`Cannot get NaN of ${r}`)}};n("FlowGraphIsNaNBlock",ar);var ir=class extends a{constructor(r){super(s,_,e=>this._polymorphicIsInf(e),"FlowGraphIsInfBlock",r)}_polymorphicIsInf(r){if(T(r))return!isFinite(y(r));throw new Error(`Cannot get isInf of ${r}`)}};n("FlowGraphIsInfBlock",ir);var ur=class extends a{constructor(r){super(s,s,e=>this._polymorphicDegToRad(e),"FlowGraphDegToRadBlock",r)}_degToRad(r){return r*Math.PI/180}_polymorphicDegToRad(r){return i(r,this._degToRad)}};n("FlowGraphDegToRadBlock",ur);var hr=class extends a{constructor(r){super(s,s,e=>this._polymorphicRadToDeg(e),"FlowGraphRadToDegBlock",r)}_radToDeg(r){return r*180/Math.PI}_polymorphicRadToDeg(r){return i(r,this._radToDeg)}};n("FlowGraphRadToDegBlock",hr);var Lr=class extends a{constructor(r){super(l,l,e=>this._polymorphicSin(e),"FlowGraphSinBlock",r)}_polymorphicSin(r){return i(r,Math.sin)}},qr=class extends a{constructor(r){super(l,l,e=>this._polymorphicCos(e),"FlowGraphCosBlock",r)}_polymorphicCos(r){return i(r,Math.cos)}},Qr=class extends a{constructor(r){super(l,l,e=>this._polymorphicTan(e),"FlowGraphTanBlock",r)}_polymorphicTan(r){return i(r,Math.tan)}},mr=class extends a{constructor(r){super(l,l,e=>this._polymorphicAsin(e),"FlowGraphASinBlock",r)}_polymorphicAsin(r){return i(r,Math.asin)}};n("FlowGraphASinBlock",mr);var yr=class extends a{constructor(r){super(l,l,e=>this._polymorphicAcos(e),"FlowGraphACosBlock",r)}_polymorphicAcos(r){return i(r,Math.acos)}};n("FlowGraphACosBlock",yr);var xr=class extends a{constructor(r){super(l,l,e=>this._polymorphicAtan(e),"FlowGraphATanBlock",r)}_polymorphicAtan(r){return i(r,Math.atan)}};n("FlowGraphATanBlock",xr);var wr=class extends m{constructor(r){super(s,s,s,(e,o)=>this._polymorphicAtan2(e,o),"FlowGraphATan2Block",r)}_polymorphicAtan2(r,e){return I(r,e,Math.atan2)}};n("FlowGraphATan2Block",wr);var dr=class extends a{constructor(r){super(s,s,e=>this._polymorphicSinh(e),"FlowGraphSinhBlock",r)}_polymorphicSinh(r){return i(r,Math.sinh)}};n("FlowGraphSinhBlock",dr);var _r=class extends a{constructor(r){super(s,s,e=>this._polymorphicCosh(e),"FlowGraphCoshBlock",r)}_polymorphicCosh(r){return i(r,Math.cosh)}};n("FlowGraphCoshBlock",_r);var fr=class extends a{constructor(r){super(s,s,e=>this._polymorphicTanh(e),"FlowGraphTanhBlock",r)}_polymorphicTanh(r){return i(r,Math.tanh)}};n("FlowGraphTanhBlock",fr);var Fr=class extends a{constructor(r){super(s,l,e=>this._polymorphicAsinh(e),"FlowGraphASinhBlock",r)}_polymorphicAsinh(r){return i(r,Math.asinh)}};n("FlowGraphASinhBlock",Fr);var Gr=class extends a{constructor(r){super(s,l,e=>this._polymorphicAcosh(e),"FlowGraphACoshBlock",r)}_polymorphicAcosh(r){return i(r,Math.acosh)}};n("FlowGraphACoshBlock",Gr);var Mr=class extends a{constructor(r){super(s,l,e=>this._polymorphicAtanh(e),"FlowGraphATanhBlock",r)}_polymorphicAtanh(r){return i(r,Math.atanh)}};n("FlowGraphATanhBlock",Mr);var Br=class extends a{constructor(r){super(s,l,e=>this._polymorphicExp(e),"FlowGraphExponentialBlock",r)}_polymorphicExp(r){return i(r,Math.exp)}};n("FlowGraphExponentialBlock",Br);var Cr=class extends a{constructor(r){super(s,l,e=>this._polymorphicLog(e),"FlowGraphLogBlock",r)}_polymorphicLog(r){return i(r,Math.log)}};n("FlowGraphLogBlock",Cr);var kr=class extends a{constructor(r){super(s,l,e=>this._polymorphicLog2(e),"FlowGraphLog2Block",r)}_polymorphicLog2(r){return i(r,Math.log2)}};n("FlowGraphLog2Block",kr);var Tr=class extends a{constructor(r){super(s,l,e=>this._polymorphicLog10(e),"FlowGraphLog10Block",r)}_polymorphicLog10(r){return i(r,Math.log10)}};n("FlowGraphLog10Block",Tr);var gr=class extends a{constructor(r){super(s,l,e=>this._polymorphicSqrt(e),"FlowGraphSquareRootBlock",r)}_polymorphicSqrt(r){return i(r,Math.sqrt)}};n("FlowGraphSquareRootBlock",gr);var Ir=class extends a{constructor(r){super(s,l,e=>this._polymorphicCubeRoot(e),"FlowGraphCubeRootBlock",r)}_polymorphicCubeRoot(r){return i(r,Math.cbrt)}};n("FlowGraphCubeRootBlock",Ir);var Nr=class extends m{constructor(r){super(s,l,l,(e,o)=>this._polymorphicPow(e,o),"FlowGraphPowerBlock",r)}_polymorphicPow(r,e){return I(r,e,Math.pow)}};n("FlowGraphPowerBlock",Nr);var Ar=class extends a{constructor(r){super(u(r?.valueType||"FlowGraphInteger"),u(r?.valueType||"FlowGraphInteger"),e=>typeof e=="boolean"?!e:typeof e=="number"?~e:new w(~e.value),"FlowGraphBitwiseNotBlock",r)}};n("FlowGraphBitwiseNotBlock",Ar);var vr=class extends m{constructor(r){super(u(r?.valueType||"FlowGraphInteger"),u(r?.valueType||"FlowGraphInteger"),u(r?.valueType||"FlowGraphInteger"),(e,o)=>{if(typeof e=="boolean"&&typeof o=="boolean")return e&&o;if(typeof e=="number"&&typeof o=="number")return e&o;if(typeof e=="object"&&typeof o=="object")return new w(e.value&o.value);throw new Error(`Cannot perform bitwise AND on ${e} and ${o}`)},"FlowGraphBitwiseAndBlock",r)}};n("FlowGraphBitwiseAndBlock",vr);var Sr=class extends m{constructor(r){super(u(r?.valueType||"FlowGraphInteger"),u(r?.valueType||"FlowGraphInteger"),u(r?.valueType||"FlowGraphInteger"),(e,o)=>{if(typeof e=="boolean"&&typeof o=="boolean")return e||o;if(typeof e=="number"&&typeof o=="number")return e|o;if(typeof e=="object"&&typeof o=="object")return new w(e.value|o.value);throw new Error(`Cannot perform bitwise OR on ${e} and ${o}`)},"FlowGraphBitwiseOrBlock",r)}};n("FlowGraphBitwiseOrBlock",Sr);var Dr=class extends m{constructor(r){super(u(r?.valueType||"FlowGraphInteger"),u(r?.valueType||"FlowGraphInteger"),u(r?.valueType||"FlowGraphInteger"),(e,o)=>{if(typeof e=="boolean"&&typeof o=="boolean")return e!==o;if(typeof e=="number"&&typeof o=="number")return e^o;if(typeof e=="object"&&typeof o=="object")return new w(e.value^o.value);throw new Error(`Cannot perform bitwise XOR on ${e} and ${o}`)},"FlowGraphBitwiseXorBlock",r)}};n("FlowGraphBitwiseXorBlock",Dr);var Rr=class extends m{constructor(r){super(d,d,d,(e,o)=>new w(e.value<<o.value),"FlowGraphBitwiseLeftShiftBlock",r)}};n("FlowGraphBitwiseLeftShiftBlock",Rr);var Er=class extends m{constructor(r){super(d,d,d,(e,o)=>new w(e.value>>o.value),"FlowGraphBitwiseRightShiftBlock",r)}};n("FlowGraphBitwiseRightShiftBlock",Er);var zr=class extends a{constructor(r){super(d,d,e=>new w(Math.clz32(e.value)),"FlowGraphLeadingZerosBlock",r)}};n("FlowGraphLeadingZerosBlock",zr);var Or=class extends a{constructor(r){super(d,d,e=>new w(e.value?31-Math.clz32(e.value&-e.value):32),"FlowGraphTrailingZerosBlock",r)}};n("FlowGraphTrailingZerosBlock",Or);function Ur(t){let r=0;for(;t;)r+=t&1,t>>=1;return r}var Vr=class extends a{constructor(r){super(d,d,e=>new w(Ur(e.value)),"FlowGraphOneBitsCounterBlock",r)}};n("FlowGraphOneBitsCounterBlock",Vr);export{E as a,z as b,O as c,V as d,L as e,q as f,Q as g,P as h,$ as i,j,W as k,Z as l,U as m,X as n,H as o,Y as p,J as q,K as r,b as s,rr as t,er as u,tr as v,or as w,sr as x,nr as y,pr as z,lr as A,cr as B,ar as C,ir as D,ur as E,hr as F,Lr as G,qr as H,Qr as I,mr as J,yr as K,xr as L,wr as M,dr as N,_r as O,fr as P,Fr as Q,Gr as R,Mr as S,Br as T,Cr as U,kr as V,Tr as W,gr as X,Ir as Y,Nr as Z,Ar as _,vr as $,Sr as aa,Dr as ba,Rr as ca,Er as da,zr as ea,Or as fa,Vr as ga};
