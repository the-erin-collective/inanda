import './polyfills.server.mjs';
import{a as P}from"./chunk-DR4QBYGL.mjs";import{a as j,d as a,o as I}from"./chunk-KTHBQP3E.mjs";import{a as h,b as l}from"./chunk-XQ3C3KRX.mjs";import{h as d,i as A}from"./chunk-JIBGCNGR.mjs";import{a as w}from"./chunk-JBXNSZOT.mjs";var _=new RegExp(/\/\{(\w+)\}(?=\/|$)/g),m=class{constructor(r,i){this.path=r,this.ownerBlock=i,this.templatedInputs=[];let n=_.exec(r),o=new Set;for(;n;){let[,e]=n;if(o.has(e))throw new Error("Duplicate template variable detected.");o.add(e),this.templatedInputs.push(i.registerDataInput(e,I,new j(0))),n=_.exec(r)}}getAccessor(r,i){let n=this.path;for(let o of this.templatedInputs){let e=o.getValue(i).value;if(typeof e!="number"||e<0)throw new Error("Invalid value for templated input.");n=n.replace(`{${o.name}}`,e.toString())}return r.convert(n)}};var f=class extends P{constructor(r){super(a,r),this.config=r,this.object=this.registerDataOutput("object",a),this.propertyName=this.registerDataOutput("propertyName",a),this.setterFunction=this.registerDataOutput("setFunction",a,this._setPropertyValue.bind(this)),this.getterFunction=this.registerDataOutput("getFunction",a,this._getPropertyValue.bind(this)),this.generateAnimationsFunction=this.registerDataOutput("generateAnimationsFunction",a,this._getInterpolationAnimationPropertyInfo.bind(this)),this.templateComponent=new m(r.jsonPointer,this)}_doOperation(r){let i=this.templateComponent.getAccessor(this.config.pathConverter,r),n=i.info.get(i.object),o=i.info.getTarget?.(i.object),e=i.info.getPropertyName?.[0](i.object);if(o)this.object.setValue(o,r),e&&this.propertyName.setValue(e,r);else throw new Error("Object is undefined");return n}_setPropertyValue(r,i,n,o){let e=this.templateComponent.getAccessor(this.config.pathConverter,o),p=e.info.type;p.startsWith("Color")&&(n=F(n,p)),e.info.set?.(n,e.object)}_getPropertyValue(r,i,n){let o=this.templateComponent.getAccessor(this.config.pathConverter,n),e=o.info.type,p=o.info.get(o.object);return e.startsWith("Color")?O(p):p}_getInterpolationAnimationPropertyInfo(r,i,n){let o=this.templateComponent.getAccessor(this.config.pathConverter,n);return(e,p,N,u)=>{let g=[],y=o.info.type;return y.startsWith("Color")&&(e=e.map(c=>({frame:c.frame,value:F(c.value,y)}))),o.info.interpolation?.forEach((c,C)=>{let V=o.info.getPropertyName?.[C](o.object)||"Animation-interpolation-"+C,b=e;N!==c.type&&(b=e.map(s=>({frame:s.frame,value:c.getValue(void 0,s.value.asArray?s.value.asArray():[s.value],0,1)})));let D=c.buildAnimations(o.object,V,60,b);for(let s of D)u&&s.babylonAnimation.setEasingFunction(u),g.push(s.babylonAnimation)}),g}}getClassName(){return"FlowGraphJsonPointerParserBlock"}};function F(t,r){return t.getClassName().startsWith("Color")?t:r==="Color3"?new h(t.x,t.y,t.z):r==="Color4"?new l(t.x,t.y,t.z,t.w):t}function O(t){if(t instanceof h)return new d(t.r,t.g,t.b);if(t instanceof l)return new A(t.r,t.g,t.b,t.a);throw new Error("Invalid color type")}w("FlowGraphJsonPointerParserBlock",f);export{f as a};
