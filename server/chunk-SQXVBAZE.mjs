import './polyfills.server.mjs';
import{a as V}from"./chunk-UCSEJCKY.mjs";import{a as k}from"./chunk-NOSOWJFY.mjs";import{a as I}from"./chunk-UBWCLNWA.mjs";import{a as E}from"./chunk-INFEWS7Q.mjs";import{s as O}from"./chunk-KTHBQP3E.mjs";import{a as f}from"./chunk-PTSTJR4O.mjs";import{a as x,d as m}from"./chunk-5GAFEDPJ.mjs";import{b as y}from"./chunk-ORZLOPEZ.mjs";import{a as C}from"./chunk-C6X2ZDGJ.mjs";import{a as v}from"./chunk-JBXNSZOT.mjs";import{b as a}from"./chunk-OMQWSIUF.mjs";import{a as l}from"./chunk-HH54ER5K.mjs";var u=class{constructor(){this.logToConsole=!1,this.log=[]}addLogItem(e){if(e.time||(e.time=Date.now()),this.log.push(e),this.logToConsole){let t=e.payload?.value;typeof t=="object"&&t.getClassName?l.Log(`[FGLog] ${e.className}:${e.uniqueId.split("-")[0]} ${e.action} - ${JSON.stringify(t.getClassName())}: ${t.toString()}`):l.Log(`[FGLog] ${e.className}:${e.uniqueId.split("-")[0]} ${e.action} - ${JSON.stringify(e.payload)}`)}}getItemsOfType(e){return this.log.filter(t=>t.action===e)}};var h=class{get enableLogging(){return this._enableLogging}set enableLogging(e){this._enableLogging!==e&&(this._enableLogging=e,this._enableLogging?(this.logger=new u,this.logger.logToConsole=!0):this.logger=null)}constructor(e){this.uniqueId=C(),this._userVariables={},this._executionVariables={},this._globalContextVariables={},this._connectionValues={},this._pendingBlocks=[],this._executionId=0,this.onNodeExecutedObservable=new a,this.treatDataAsRightHanded=!1,this._enableLogging=!1,this._configuration=e,this.assetsContext=e.assetsContext??e.scene}hasVariable(e){return e in this._userVariables}setVariable(e,t){this._userVariables[e]=t,this.logger?.addLogItem({time:Date.now(),className:this.getClassName(),uniqueId:this.uniqueId,action:"ContextVariableSet",payload:{name:e,value:t}})}getAsset(e,t){return V(this.assetsContext,e,t)}getVariable(e){return this.logger?.addLogItem({time:Date.now(),className:this.getClassName(),uniqueId:this.uniqueId,action:"ContextVariableGet",payload:{name:e,value:this._userVariables[e]}}),this._userVariables[e]}get userVariables(){return this._userVariables}getScene(){return this._configuration.scene}_getUniqueIdPrefixedName(e,t){return`${e.uniqueId}_${t}`}_getGlobalContextVariable(e,t){return this.logger?.addLogItem({time:Date.now(),className:this.getClassName(),uniqueId:this.uniqueId,action:"GlobalVariableGet",payload:{name:e,defaultValue:t,possibleValue:this._globalContextVariables[e]}}),this._hasGlobalContextVariable(e)?this._globalContextVariables[e]:t}_setGlobalContextVariable(e,t){this.logger?.addLogItem({time:Date.now(),className:this.getClassName(),uniqueId:this.uniqueId,action:"GlobalVariableSet",payload:{name:e,value:t}}),this._globalContextVariables[e]=t}_deleteGlobalContextVariable(e){this.logger?.addLogItem({time:Date.now(),className:this.getClassName(),uniqueId:this.uniqueId,action:"GlobalVariableDelete",payload:{name:e}}),delete this._globalContextVariables[e]}_hasGlobalContextVariable(e){return e in this._globalContextVariables}_setExecutionVariable(e,t,s){this._executionVariables[this._getUniqueIdPrefixedName(e,t)]=s}_getExecutionVariable(e,t,s){return this._hasExecutionVariable(e,t)?this._executionVariables[this._getUniqueIdPrefixedName(e,t)]:s}_deleteExecutionVariable(e,t){delete this._executionVariables[this._getUniqueIdPrefixedName(e,t)]}_hasExecutionVariable(e,t){return this._getUniqueIdPrefixedName(e,t)in this._executionVariables}_hasConnectionValue(e){return e.uniqueId in this._connectionValues}_setConnectionValue(e,t){this._connectionValues[e.uniqueId]=t,this.logger?.addLogItem({time:Date.now(),className:this.getClassName(),uniqueId:this.uniqueId,action:"SetConnectionValue",payload:{connectionPointId:e.uniqueId,value:t}})}_setConnectionValueByKey(e,t){this._connectionValues[e]=t}_getConnectionValue(e){return this.logger?.addLogItem({time:Date.now(),className:this.getClassName(),uniqueId:this.uniqueId,action:"GetConnectionValue",payload:{connectionPointId:e.uniqueId,value:this._connectionValues[e.uniqueId]}}),this._connectionValues[e.uniqueId]}get configuration(){return this._configuration}get hasPendingBlocks(){return this._pendingBlocks.length>0}_addPendingBlock(e){this._pendingBlocks.includes(e)||(this._pendingBlocks.push(e),this._pendingBlocks.sort((t,s)=>t.priority-s.priority))}_removePendingBlock(e){let t=this._pendingBlocks.indexOf(e);t!==-1&&this._pendingBlocks.splice(t,1)}_clearPendingBlocks(){for(let e of this._pendingBlocks)e._cancelPendingTasks(this);this._pendingBlocks.length=0}_notifyExecuteNode(e){this.onNodeExecutedObservable.notifyObservers(e),this.logger?.addLogItem({time:Date.now(),className:e.getClassName(),uniqueId:e.uniqueId,action:"ExecuteBlock"})}_notifyOnTick(e){this._setGlobalContextVariable("timeSinceStart",e.timeSinceStart),this._setGlobalContextVariable("deltaTime",e.deltaTime);for(let t of this._pendingBlocks)t._executeOnTick?.(this)}_increaseExecutionId(){this._executionId++}get executionId(){return this._executionId}serialize(e={},t=O){e.uniqueId=this.uniqueId,e._userVariables={};for(let s in this._userVariables)t(s,this._userVariables[s],e._userVariables);e._connectionValues={};for(let s in this._connectionValues)t(s,this._connectionValues[s],e._connectionValues);this.assetsContext!==this.getScene()&&(e._assetsContext={meshes:this.assetsContext.meshes.map(s=>s.id),materials:this.assetsContext.materials.map(s=>s.id),textures:this.assetsContext.textures.map(s=>s.name),animations:this.assetsContext.animations.map(s=>s.name),lights:this.assetsContext.lights.map(s=>s.id),cameras:this.assetsContext.cameras.map(s=>s.id),sounds:this.assetsContext.sounds?.map(s=>s.name),skeletons:this.assetsContext.skeletons.map(s=>s.id),particleSystems:this.assetsContext.particleSystems.map(s=>s.name),geometries:this.assetsContext.geometries.map(s=>s.id),multiMaterials:this.assetsContext.multiMaterials.map(s=>s.id),transformNodes:this.assetsContext.transformNodes.map(s=>s.id)})}getClassName(){return"FlowGraphContext"}};x([m()],h.prototype,"uniqueId",void 0);var g=class{constructor(e){this.onEventTriggeredObservable=new a,this.sceneReadyTriggered=!1,this._pointerUnderMeshState={},this._startingTime=0,this._scene=e,this._initialize()}_initialize(){this._sceneReadyObserver=this._scene.onReadyObservable.add(()=>{this.sceneReadyTriggered||(this.onEventTriggeredObservable.notifyObservers({type:"SceneReady"}),this.sceneReadyTriggered=!0)}),this._sceneDisposeObserver=this._scene.onDisposeObservable.add(()=>{this.onEventTriggeredObservable.notifyObservers({type:"SceneDispose"})}),this._sceneOnBeforeRenderObserver=this._scene.onBeforeRenderObservable.add(()=>{let e=this._scene.getEngine().getDeltaTime()/1e3;this.onEventTriggeredObservable.notifyObservers({type:"SceneBeforeRender",payload:{timeSinceStart:this._startingTime,deltaTime:e}}),this._startingTime+=e}),this._meshPickedObserver=this._scene.onPointerObservable.add(e=>{this.onEventTriggeredObservable.notifyObservers({type:"MeshPick",payload:e})},f.POINTERPICK),this._meshUnderPointerObserver=this._scene.onMeshUnderPointerUpdatedObservable.add(e=>{let t=e.pointerId,s=e.mesh,n=this._pointerUnderMeshState[t];!n&&s?this.onEventTriggeredObservable.notifyObservers({type:"PointerOver",payload:{pointerId:t,mesh:s}}):n&&!s?this.onEventTriggeredObservable.notifyObservers({type:"PointerOut",payload:{pointerId:t,mesh:n}}):n&&s&&n!==s&&(this.onEventTriggeredObservable.notifyObservers({type:"PointerOut",payload:{pointerId:t,mesh:n,over:s}}),this.onEventTriggeredObservable.notifyObservers({type:"PointerOver",payload:{pointerId:t,mesh:s,out:n}})),this._pointerUnderMeshState[t]=s},f.POINTERMOVE)}dispose(){this._sceneDisposeObserver?.remove(),this._sceneReadyObserver?.remove(),this._sceneOnBeforeRenderObserver?.remove(),this._meshPickedObserver?.remove(),this._meshUnderPointerObserver?.remove(),this.onEventTriggeredObservable.clear()}};var _=class{get state(){return this._state}set state(e){this._state=e,this.onStateChangedObservable.notifyObservers(e)}constructor(e){this.onStateChangedObservable=new a,this._eventBlocks={SceneReady:[],SceneDispose:[],SceneBeforeRender:[],MeshPick:[],PointerDown:[],PointerUp:[],PointerMove:[],PointerOver:[],PointerOut:[],SceneAfterRender:[],NoTrigger:[]},this._executionContexts=[],this._state=0,this._scene=e.scene,this._sceneEventCoordinator=new g(this._scene),this._coordinator=e.coordinator,this._eventObserver=this._sceneEventCoordinator.onEventTriggeredObservable.add(t=>{for(let s of this._executionContexts){let n=this._getContextualOrder(t.type,s);for(let i of n)if(!i._executeEvent(s,t.payload))break}switch(t.type){case"SceneReady":this._sceneEventCoordinator.sceneReadyTriggered=!0;break;case"SceneBeforeRender":for(let s of this._executionContexts)s._notifyOnTick(t.payload);break;case"SceneDispose":this.dispose();break}})}createContext(){let e=new h({scene:this._scene,coordinator:this._coordinator});return this._executionContexts.push(e),e}getContext(e){return this._executionContexts[e]}addEventBlock(e){if((e.type==="PointerOver"||e.type==="PointerOut")&&(this._scene.constantlyUpdateMeshUnderPointer=!0),e.type!=="NoTrigger"&&this._eventBlocks[e.type].push(e),this.state===1)for(let t of this._executionContexts)e._startPendingTasks(t);else this.onStateChangedObservable.addOnce(t=>{if(t===1)for(let s of this._executionContexts)e._startPendingTasks(s)})}start(){this.state!==1&&(this._executionContexts.length===0&&this.createContext(),this.onStateChangedObservable.add(e=>{e===1&&(this._startPendingEvents(),this._scene.isReady(!0)&&this._sceneEventCoordinator.onEventTriggeredObservable.notifyObservers({type:"SceneReady"}))}),this.state=1)}_startPendingEvents(){for(let e of this._executionContexts)for(let t in this._eventBlocks){let s=this._getContextualOrder(t,e);for(let n of s)n._startPendingTasks(e)}}_getContextualOrder(e,t){let s=this._eventBlocks[e].sort((n,i)=>i.initPriority-n.initPriority);if(e==="MeshPick"){let n=[];for(let i of s){let o=i.asset.getValue(t),d=0;for(;d<s.length;d++){let p=s[d].asset.getValue(t);if(o&&p&&I(o,p))break}n.splice(d,0,i)}return n}return s}dispose(){if(this.state!==0){this.state=0;for(let e of this._executionContexts)e._clearPendingBlocks();this._executionContexts.length=0;for(let e in this._eventBlocks)this._eventBlocks[e].length=0;this._eventObserver?.remove(),this._sceneEventCoordinator.dispose()}}visitAllBlocks(e){let t=[],s=new Set;for(let n in this._eventBlocks)for(let i of this._eventBlocks[n])t.push(i),s.add(i.uniqueId);for(;t.length>0;){let n=t.pop();e(n);for(let i of n.dataInputs)for(let o of i._connectedPoint)s.has(o._ownerBlock.uniqueId)||(t.push(o._ownerBlock),s.add(o._ownerBlock.uniqueId));if(n instanceof E)for(let i of n.signalOutputs)for(let o of i._connectedPoint)s.has(o._ownerBlock.uniqueId)||(t.push(o._ownerBlock),s.add(o._ownerBlock.uniqueId))}}serialize(e={},t){e.allBlocks=[],this.visitAllBlocks(s=>{let n={};s.serialize(n),e.allBlocks.push(n)}),e.executionContexts=[];for(let s of this._executionContexts){let n={};s.serialize(n,t),e.executionContexts.push(n)}}};var c=class r{constructor(e){this.config=e,this.dispatchEventsSynchronously=!0,this._flowGraphs=[],this._customEventsMap=new Map,this._eventExecutionCounter=new Map,this._executeOnNextFrame=[],this._eventUniqueId=0,this._disposeObserver=this.config.scene.onDisposeObservable.add(()=>{this.dispose()}),this._onBeforeRenderObserver=this.config.scene.onBeforeRenderObservable.add(()=>{this._eventExecutionCounter.clear();let s=this._executeOnNextFrame.slice(0);if(s.length)for(let n of s){this.notifyCustomEvent(n.id,n.data,!1);let i=this._executeOnNextFrame.findIndex(o=>o.uniqueId===n.uniqueId);i!==-1&&this._executeOnNextFrame.splice(i,1)}}),(r.SceneCoordinators.get(this.config.scene)??[]).push(this)}createGraph(){let e=new _({scene:this.config.scene,coordinator:this});return this._flowGraphs.push(e),e}removeGraph(e){let t=this._flowGraphs.indexOf(e);t!==-1&&(e.dispose(),this._flowGraphs.splice(t,1))}start(){for(let e of this._flowGraphs)e.start()}dispose(){for(let s of this._flowGraphs)s.dispose();this._flowGraphs.length=0,this._disposeObserver?.remove(),this._onBeforeRenderObserver?.remove();let e=r.SceneCoordinators.get(this.config.scene)??[],t=e.indexOf(this);t!==-1&&e.splice(t,1)}serialize(e,t){e._flowGraphs=[];for(let s of this._flowGraphs){let n={};s.serialize(n,t),e._flowGraphs.push(n)}e.dispatchEventsSynchronously=this.dispatchEventsSynchronously}get flowGraphs(){return this._flowGraphs}getCustomEventObservable(e){let t=this._customEventsMap.get(e);return t||(t=new a,this._customEventsMap.set(e,t)),t}notifyCustomEvent(e,t,s=!this.dispatchEventsSynchronously){if(s){this._executeOnNextFrame.push({id:e,data:t,uniqueId:this._eventUniqueId++});return}if(this._eventExecutionCounter.has(e)){let i=this._eventExecutionCounter.get(e);if(this._eventExecutionCounter.set(e,i+1),i>=r.MaxEventTypeExecutionPerFrame){i===r.MaxEventTypeExecutionPerFrame&&l.Warn(`FlowGraphCoordinator: Too many executions of event "${e}".`);return}}else this._eventExecutionCounter.set(e,1);let n=this._customEventsMap.get(e);n&&n.notifyObservers(t)}};c.MaxEventsPerType=30;c.MaxEventTypeExecutionPerFrame=30;c.SceneCoordinators=new Map;var b=class extends k{constructor(e){super(e),this.config=e,this.initPriority=1;for(let t in this.config.eventData)this.registerDataOutput(t,this.config.eventData[t].type)}_preparePendingTasks(e){let t=e.configuration.coordinator.getCustomEventObservable(this.config.eventId);if(t&&t.hasObservers()&&t.observers.length>c.MaxEventsPerType){this._reportError(e,`FlowGraphReceiveCustomEventBlock: Too many observers for event ${this.config.eventId}. Max is ${c.MaxEventsPerType}.`);return}let s=t.add(n=>{let i=Object.keys(n);for(let o of i)this.getDataOutput(o)?.setValue(n[o],e);this._execute(e)});e._setExecutionVariable(this,"_eventObserver",s)}_cancelPendingTasks(e){let t=e.configuration.coordinator.getCustomEventObservable(this.config.eventId);if(t){let s=e._getExecutionVariable(this,"_eventObserver",null);t.remove(s)}else y.Warn(`FlowGraphReceiveCustomEventBlock: Missing observable for event ${this.config.eventId}`)}_executeEvent(e,t){return!0}getClassName(){return"FlowGraphReceiveCustomEventBlock"}};v("FlowGraphReceiveCustomEventBlock",b);export{b as a};
